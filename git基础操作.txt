文件出现在“Untracked files”下面。未跟踪的文件意味着Git在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。
出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，以上两种情况需要运行 git add 命令

git add 文件或路径: 可以用来开始跟踪新文件、或把已跟踪的文件放到暂存区、或用于合并时把有冲突的文件标记为已解决状态等。其实 git add 的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area



只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交（commit），那么该文件此时此刻的版本将被留存在历史记录中。

git commit: 提交（要输入本次提交的说明）
，尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤

git push origin master: 把本地分支master中已提交的文件都push到远程仓库origin上。

git clone 是本地没有 repository 时，将远程 repository 整个下载过来。

git pull 是本地有 repository 时，将远程 repository 里新的 commit 数据(如有的话)下载过来，并且与本地代码merge。

git branch master :创建master本地分支

跟踪远程分支
从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。
在克隆仓库时，Git 通常会自动创建一个名为 master 的本地分支来跟踪远程分支 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如远程 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [本地分支名] [远程名]/[远程分支名]


删除远程分支
git branch -d Chapater8 可以删除本地分支
git push origin --delete Chapater6   可以删除远程分支Chapater6  （分支名只写origin后的就可以）

删除远程分支
如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：
$ git push origin :serverfix
To git@github.com:schacon/simplegit.git
 - [deleted]         serverfix
咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”